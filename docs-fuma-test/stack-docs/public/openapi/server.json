{
  "openapi": "3.1.0",
  "info": {
    "title": "Stack REST API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.stack-auth.com/api/v1",
      "description": "Stack REST API"
    }
  ],
  "paths": {
    "": {
      "get": {
        "summary": "/api/v1",
        "description": "Returns a human-readable message with some useful information about the API.",
        "parameters": [
          {
            "name": "X-Stack-Project-Id",
            "in": "header",
            "type": "string",
            "schema": {
              "type": "string",
              "example": "e0b52f4d-dece-408c-af49-d23061bb0f8d",
              "description": "The unique identifier of the project"
            },
            "description": "The unique identifier of the project",
            "example": "e0b52f4d-dece-408c-af49-d23061bb0f8d",
            "required": false
          },
          {
            "name": "X-Stack-Branch-Id",
            "in": "header",
            "type": "string",
            "schema": {
              "type": "string",
              "example": "e0b52f4d-dece-408c-af49-d23061bb0f8d",
              "description": "The unique identifier of the project"
            },
            "description": "The unique identifier of the project",
            "example": "e0b52f4d-dece-408c-af49-d23061bb0f8d",
            "required": false
          },
          {
            "name": "X-Stack-Access-Type",
            "in": "header",
            "type": "string",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "X-Stack-Access-Token",
            "in": "header",
            "type": "string",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "X-Stack-Refresh-Token",
            "in": "header",
            "type": "string",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "X-Stack-Publishable-Client-Key",
            "in": "header",
            "type": "string",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "X-Stack-Secret-Server-Key",
            "in": "header",
            "type": "string",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "X-Stack-Super-Secret-Admin-Key",
            "in": "header",
            "type": "string",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "tags": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Welcome to the Stack API endpoint! Please refer to the documentation at https://docs.stack-auth.com/\n\nAuthentication: None"
                }
              }
            }
          }
        }
      }
    },
    "/auth/anonymous/sign-up": {
      "post": {
        "summary": "Sign up anonymously",
        "description": "Create a new anonymous account with no email",
        "parameters": [],
        "tags": [
          "Anonymous"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "refresh_token": {
                      "type": "string"
                    },
                    "user_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "access_token",
                    "refresh_token",
                    "user_id"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/user-api-keys": {
      "get": {
        "summary": "List user API keys",
        "description": "List all user API keys for the project with their metadata and status",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "tags": [
          "API Keys"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "expires_at_millis": {
                            "type": "number"
                          },
                          "manually_revoked_at_millis": {
                            "type": "number"
                          },
                          "created_at_millis": {
                            "type": "number"
                          },
                          "is_public": {
                            "type": "boolean"
                          },
                          "value": {
                            "type": "object",
                            "properties": {
                              "last_four": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "last_four"
                            ]
                          },
                          "type": {
                            "type": "string"
                          },
                          "user_id": {
                            "type": "string",
                            "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                            "description": "The ID of the user, or the special value `me` for the currently authenticated user"
                          }
                        },
                        "required": [
                          "id",
                          "description",
                          "created_at_millis",
                          "is_public",
                          "value",
                          "type",
                          "user_id"
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "example": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                          "description": "The cursor to fetch the next page of results. null if there is no next page."
                        }
                      },
                      "required": []
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create API key",
        "description": "Create a new API key for a user or team",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "expires_at_millis": {
                    "type": "number"
                  },
                  "is_public": {
                    "type": "boolean"
                  },
                  "user_id": {
                    "type": "string",
                    "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                    "description": "The ID of the user, or the special value `me` for the currently authenticated user"
                  }
                },
                "required": [
                  "description",
                  "user_id"
                ],
                "example": {
                  "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                }
              }
            }
          }
        },
        "tags": [
          "API Keys"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "expires_at_millis": {
                      "type": "number"
                    },
                    "manually_revoked_at_millis": {
                      "type": "number"
                    },
                    "created_at_millis": {
                      "type": "number"
                    },
                    "is_public": {
                      "type": "boolean"
                    },
                    "type": {
                      "type": "string"
                    },
                    "user_id": {
                      "type": "string",
                      "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "description": "The ID of the user, or the special value `me` for the currently authenticated user"
                    }
                  },
                  "required": [
                    "value",
                    "id",
                    "description",
                    "created_at_millis",
                    "is_public",
                    "type",
                    "user_id"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/team-api-keys": {
      "get": {
        "summary": "List team API keys",
        "description": "List all team API keys for the project with their metadata and status",
        "parameters": [
          {
            "name": "team_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "API Keys"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "expires_at_millis": {
                            "type": "number"
                          },
                          "manually_revoked_at_millis": {
                            "type": "number"
                          },
                          "created_at_millis": {
                            "type": "number"
                          },
                          "is_public": {
                            "type": "boolean"
                          },
                          "value": {
                            "type": "object",
                            "properties": {
                              "last_four": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "last_four"
                            ]
                          },
                          "type": {
                            "type": "string"
                          },
                          "team_id": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "description",
                          "created_at_millis",
                          "is_public",
                          "value",
                          "type",
                          "team_id"
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "example": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                          "description": "The cursor to fetch the next page of results. null if there is no next page."
                        }
                      },
                      "required": []
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create API key",
        "description": "Create a new API key for a user or team",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "expires_at_millis": {
                    "type": "number"
                  },
                  "is_public": {
                    "type": "boolean"
                  },
                  "team_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "description",
                  "team_id"
                ],
                "example": {}
              }
            }
          }
        },
        "tags": [
          "API Keys"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "expires_at_millis": {
                      "type": "number"
                    },
                    "manually_revoked_at_millis": {
                      "type": "number"
                    },
                    "created_at_millis": {
                      "type": "number"
                    },
                    "is_public": {
                      "type": "boolean"
                    },
                    "type": {
                      "type": "string"
                    },
                    "team_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "value",
                    "id",
                    "description",
                    "created_at_millis",
                    "is_public",
                    "type",
                    "team_id"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/user-api-keys/check": {
      "post": {
        "summary": "Check user API key validity",
        "description": "Validate a user API key",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "api_key": {
                    "type": "string"
                  }
                },
                "required": [
                  "api_key"
                ],
                "example": {}
              }
            }
          }
        },
        "tags": [
          "API Keys"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "expires_at_millis": {
                      "type": "number"
                    },
                    "manually_revoked_at_millis": {
                      "type": "number"
                    },
                    "created_at_millis": {
                      "type": "number"
                    },
                    "is_public": {
                      "type": "boolean"
                    },
                    "value": {
                      "type": "object",
                      "properties": {
                        "last_four": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "last_four"
                      ]
                    },
                    "type": {
                      "type": "string"
                    },
                    "user_id": {
                      "type": "string",
                      "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "description": "The ID of the user, or the special value `me` for the currently authenticated user"
                    }
                  },
                  "required": [
                    "id",
                    "description",
                    "created_at_millis",
                    "is_public",
                    "value",
                    "type",
                    "user_id"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/user-api-keys/{api_key_id}": {
      "get": {
        "summary": "Get user API key details",
        "description": "Get details of a specific user API key",
        "parameters": [
          {
            "name": "api_key_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "API Keys"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "expires_at_millis": {
                      "type": "number"
                    },
                    "manually_revoked_at_millis": {
                      "type": "number"
                    },
                    "created_at_millis": {
                      "type": "number"
                    },
                    "is_public": {
                      "type": "boolean"
                    },
                    "value": {
                      "type": "object",
                      "properties": {
                        "last_four": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "last_four"
                      ]
                    },
                    "type": {
                      "type": "string"
                    },
                    "user_id": {
                      "type": "string",
                      "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "description": "The ID of the user, or the special value `me` for the currently authenticated user"
                    }
                  },
                  "required": [
                    "id",
                    "description",
                    "created_at_millis",
                    "is_public",
                    "value",
                    "type",
                    "user_id"
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update user API key",
        "description": "Update an user API key",
        "parameters": [
          {
            "name": "api_key_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "revoked": {
                    "type": "boolean"
                  }
                },
                "example": {}
              }
            }
          }
        },
        "tags": [
          "API Keys"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "expires_at_millis": {
                      "type": "number"
                    },
                    "manually_revoked_at_millis": {
                      "type": "number"
                    },
                    "created_at_millis": {
                      "type": "number"
                    },
                    "is_public": {
                      "type": "boolean"
                    },
                    "value": {
                      "type": "object",
                      "properties": {
                        "last_four": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "last_four"
                      ]
                    },
                    "type": {
                      "type": "string"
                    },
                    "user_id": {
                      "type": "string",
                      "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "description": "The ID of the user, or the special value `me` for the currently authenticated user"
                    }
                  },
                  "required": [
                    "id",
                    "description",
                    "created_at_millis",
                    "is_public",
                    "value",
                    "type",
                    "user_id"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/team-api-keys/check": {
      "post": {
        "summary": "Check team API key validity",
        "description": "Validate a team API key",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "api_key": {
                    "type": "string"
                  }
                },
                "required": [
                  "api_key"
                ],
                "example": {}
              }
            }
          }
        },
        "tags": [
          "API Keys"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "expires_at_millis": {
                      "type": "number"
                    },
                    "manually_revoked_at_millis": {
                      "type": "number"
                    },
                    "created_at_millis": {
                      "type": "number"
                    },
                    "is_public": {
                      "type": "boolean"
                    },
                    "value": {
                      "type": "object",
                      "properties": {
                        "last_four": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "last_four"
                      ]
                    },
                    "type": {
                      "type": "string"
                    },
                    "team_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "description",
                    "created_at_millis",
                    "is_public",
                    "value",
                    "type",
                    "team_id"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/team-api-keys/{api_key_id}": {
      "get": {
        "summary": "Get team API key details",
        "description": "Get details of a specific team API key",
        "parameters": [
          {
            "name": "api_key_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "API Keys"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "expires_at_millis": {
                      "type": "number"
                    },
                    "manually_revoked_at_millis": {
                      "type": "number"
                    },
                    "created_at_millis": {
                      "type": "number"
                    },
                    "is_public": {
                      "type": "boolean"
                    },
                    "value": {
                      "type": "object",
                      "properties": {
                        "last_four": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "last_four"
                      ]
                    },
                    "type": {
                      "type": "string"
                    },
                    "team_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "description",
                    "created_at_millis",
                    "is_public",
                    "value",
                    "type",
                    "team_id"
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update team API key",
        "description": "Update an team API key",
        "parameters": [
          {
            "name": "api_key_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "revoked": {
                    "type": "boolean"
                  }
                },
                "example": {}
              }
            }
          }
        },
        "tags": [
          "API Keys"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "expires_at_millis": {
                      "type": "number"
                    },
                    "manually_revoked_at_millis": {
                      "type": "number"
                    },
                    "created_at_millis": {
                      "type": "number"
                    },
                    "is_public": {
                      "type": "boolean"
                    },
                    "value": {
                      "type": "object",
                      "properties": {
                        "last_four": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "last_four"
                      ]
                    },
                    "type": {
                      "type": "string"
                    },
                    "team_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "description",
                    "created_at_millis",
                    "is_public",
                    "value",
                    "type",
                    "team_id"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/cli": {
      "post": {
        "summary": "Initiate CLI authentication",
        "description": "Create a new CLI authentication session and return polling and login codes",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "expires_in_millis": {
                    "type": "number",
                    "default": 7200000
                  }
                },
                "example": {}
              }
            }
          }
        },
        "tags": [
          "CLI Authentication"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "polling_code": {
                      "type": "string"
                    },
                    "login_code": {
                      "type": "string"
                    },
                    "expires_at": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "polling_code",
                    "login_code",
                    "expires_at"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/cli/poll": {
      "post": {
        "summary": "Poll CLI authentication status",
        "description": "Check the status of a CLI authentication session using the polling code",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "polling_code": {
                    "type": "string"
                  }
                },
                "required": [
                  "polling_code"
                ],
                "example": {}
              }
            }
          }
        },
        "tags": [
          "CLI Authentication"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "refresh_token": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status"
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "refresh_token": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/cli/complete": {
      "post": {
        "summary": "Complete CLI authentication",
        "description": "Set the refresh token for a CLI authentication session using the login code",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "login_code": {
                    "type": "string"
                  },
                  "refresh_token": {
                    "type": "string"
                  }
                },
                "required": [
                  "login_code",
                  "refresh_token"
                ],
                "example": {}
              }
            }
          }
        },
        "tags": [
          "CLI Authentication"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Always equal to true.",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/contact-channels": {
      "get": {
        "summary": "List contact channels",
        "description": "Retrieves a list of all contact channels for a user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
              "description": "The ID of the user, or the special value `me` for the currently authenticated user"
            },
            "description": "The ID of the user, or the special value `me` for the currently authenticated user",
            "required": false
          },
          {
            "name": "contact_channel_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "tags": [
          "Contact Channels"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user_id": {
                            "type": "string",
                            "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                            "description": "The unique identifier of the user"
                          },
                          "id": {
                            "type": "string",
                            "example": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                            "description": "The unique identifier of the contact channel"
                          },
                          "value": {
                            "type": "string",
                            "example": "johndoe@example.com",
                            "description": "The value of the contact channel. For email, this should be a valid email address."
                          },
                          "type": {
                            "type": "string",
                            "example": "email",
                            "description": "The type of the contact channel. Currently only \"email\" is supported."
                          },
                          "used_for_auth": {
                            "type": "boolean",
                            "example": true,
                            "description": "Whether the contact channel is used for authentication. If this is set to `true`, the user will be able to sign in with the contact channel with password or OTP."
                          },
                          "is_verified": {
                            "type": "boolean",
                            "example": true,
                            "description": "Whether the contact channel has been verified. If this is set to `true`, the contact channel has been verified to belong to the user."
                          },
                          "is_primary": {
                            "type": "boolean",
                            "example": true,
                            "description": "Whether the contact channel is the primary contact channel. If this is set to `true`, it will be used for authentication and notifications by default."
                          }
                        },
                        "required": [
                          "user_id",
                          "id",
                          "value",
                          "type",
                          "used_for_auth",
                          "is_verified",
                          "is_primary"
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "example": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                          "description": "The cursor to fetch the next page of results. null if there is no next page."
                        }
                      },
                      "required": []
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a contact channel",
        "description": "Add a new contact channel for a user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
              "description": "The ID of the user, or the special value `me` for the currently authenticated user"
            },
            "description": "The ID of the user, or the special value `me` for the currently authenticated user",
            "required": false
          },
          {
            "name": "contact_channel_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "is_verified": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether the contact channel has been verified. If this is set to `true`, the contact channel has been verified to belong to the user."
                  },
                  "user_id": {
                    "type": "string",
                    "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                    "description": "The ID of the user, or the special value `me` for the currently authenticated user"
                  },
                  "value": {
                    "type": "string",
                    "example": "johndoe@example.com",
                    "description": "The value of the contact channel. For email, this should be a valid email address."
                  },
                  "type": {
                    "type": "string",
                    "example": "email",
                    "description": "The type of the contact channel. Currently only \"email\" is supported."
                  },
                  "used_for_auth": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether the contact channel is used for authentication. If this is set to `true`, the user will be able to sign in with the contact channel with password or OTP."
                  },
                  "is_primary": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether the contact channel is the primary contact channel. If this is set to `true`, it will be used for authentication and notifications by default."
                  }
                },
                "required": [
                  "user_id",
                  "value",
                  "type",
                  "used_for_auth"
                ],
                "example": {
                  "is_verified": true,
                  "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                  "value": "johndoe@example.com",
                  "type": "email",
                  "used_for_auth": true,
                  "is_primary": true
                }
              }
            }
          }
        },
        "tags": [
          "Contact Channels"
        ],
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "type": "string",
                      "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "description": "The unique identifier of the user"
                    },
                    "id": {
                      "type": "string",
                      "example": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                      "description": "The unique identifier of the contact channel"
                    },
                    "value": {
                      "type": "string",
                      "example": "johndoe@example.com",
                      "description": "The value of the contact channel. For email, this should be a valid email address."
                    },
                    "type": {
                      "type": "string",
                      "example": "email",
                      "description": "The type of the contact channel. Currently only \"email\" is supported."
                    },
                    "used_for_auth": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the contact channel is used for authentication. If this is set to `true`, the user will be able to sign in with the contact channel with password or OTP."
                    },
                    "is_verified": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the contact channel has been verified. If this is set to `true`, the contact channel has been verified to belong to the user."
                    },
                    "is_primary": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the contact channel is the primary contact channel. If this is set to `true`, it will be used for authentication and notifications by default."
                    }
                  },
                  "required": [
                    "user_id",
                    "id",
                    "value",
                    "type",
                    "used_for_auth",
                    "is_verified",
                    "is_primary"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/contact-channels/verify": {
      "post": {
        "summary": "Verify an email",
        "description": "Verify an email address of a user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2",
                    "description": "A 45 character code"
                  }
                },
                "required": [
                  "code"
                ],
                "example": {
                  "code": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2"
                }
              }
            }
          }
        },
        "tags": [
          "Contact Channels"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Always equal to true.",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/contact-channels/verify/check-code": {
      "post": {
        "summary": "Check email verification code",
        "description": "Check if an email verification code is valid without using it",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2",
                    "description": "A 45 character code"
                  }
                },
                "required": [
                  "code"
                ],
                "example": {
                  "code": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2"
                }
              }
            }
          }
        },
        "tags": [
          "Contact Channels"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "is_code_valid": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "is_code_valid"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/contact-channels/{user_id}/{contact_channel_id}": {
      "get": {
        "summary": "Get a contact channel",
        "description": "Retrieves a specific contact channel by the user ID and the contact channel ID.",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
              "description": "The ID of the user, or the special value `me` for the currently authenticated user"
            },
            "description": "The ID of the user, or the special value `me` for the currently authenticated user",
            "required": false
          },
          {
            "name": "contact_channel_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "me",
              "description": "the user that the contact channel belongs to"
            },
            "description": "the user that the contact channel belongs to",
            "required": true
          },
          {
            "name": "contact_channel_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "b3d396b8-c574-4c80-97b3-50031675ceb2",
              "description": "the target contact channel"
            },
            "description": "the target contact channel",
            "required": true
          }
        ],
        "tags": [
          "Contact Channels"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "type": "string",
                      "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "description": "The unique identifier of the user"
                    },
                    "id": {
                      "type": "string",
                      "example": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                      "description": "The unique identifier of the contact channel"
                    },
                    "value": {
                      "type": "string",
                      "example": "johndoe@example.com",
                      "description": "The value of the contact channel. For email, this should be a valid email address."
                    },
                    "type": {
                      "type": "string",
                      "example": "email",
                      "description": "The type of the contact channel. Currently only \"email\" is supported."
                    },
                    "used_for_auth": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the contact channel is used for authentication. If this is set to `true`, the user will be able to sign in with the contact channel with password or OTP."
                    },
                    "is_verified": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the contact channel has been verified. If this is set to `true`, the contact channel has been verified to belong to the user."
                    },
                    "is_primary": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the contact channel is the primary contact channel. If this is set to `true`, it will be used for authentication and notifications by default."
                    }
                  },
                  "required": [
                    "user_id",
                    "id",
                    "value",
                    "type",
                    "used_for_auth",
                    "is_verified",
                    "is_primary"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a contact channel",
        "description": "Removes a contact channel for a given user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
              "description": "The ID of the user, or the special value `me` for the currently authenticated user"
            },
            "description": "The ID of the user, or the special value `me` for the currently authenticated user",
            "required": false
          },
          {
            "name": "contact_channel_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "me",
              "description": "the user that the contact channel belongs to"
            },
            "description": "the user that the contact channel belongs to",
            "required": true
          },
          {
            "name": "contact_channel_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "b3d396b8-c574-4c80-97b3-50031675ceb2",
              "description": "the target contact channel"
            },
            "description": "the target contact channel",
            "required": true
          }
        ],
        "tags": [
          "Contact Channels"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Always equal to true.",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a contact channel",
        "description": "Updates an existing contact channel. Only the values provided will be updated.",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
              "description": "The ID of the user, or the special value `me` for the currently authenticated user"
            },
            "description": "The ID of the user, or the special value `me` for the currently authenticated user",
            "required": false
          },
          {
            "name": "contact_channel_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "me",
              "description": "the user that the contact channel belongs to"
            },
            "description": "the user that the contact channel belongs to",
            "required": true
          },
          {
            "name": "contact_channel_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "b3d396b8-c574-4c80-97b3-50031675ceb2",
              "description": "the target contact channel"
            },
            "description": "the target contact channel",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "is_verified": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether the contact channel has been verified. If this is set to `true`, the contact channel has been verified to belong to the user."
                  },
                  "value": {
                    "type": "string",
                    "example": "johndoe@example.com",
                    "description": "The value of the contact channel. For email, this should be a valid email address."
                  },
                  "type": {
                    "type": "string",
                    "example": "email",
                    "description": "The type of the contact channel. Currently only \"email\" is supported."
                  },
                  "used_for_auth": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether the contact channel is used for authentication. If this is set to `true`, the user will be able to sign in with the contact channel with password or OTP."
                  },
                  "is_primary": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether the contact channel is the primary contact channel. If this is set to `true`, it will be used for authentication and notifications by default."
                  }
                },
                "example": {
                  "is_verified": true,
                  "value": "johndoe@example.com",
                  "type": "email",
                  "used_for_auth": true,
                  "is_primary": true
                }
              }
            }
          }
        },
        "tags": [
          "Contact Channels"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "type": "string",
                      "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "description": "The unique identifier of the user"
                    },
                    "id": {
                      "type": "string",
                      "example": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                      "description": "The unique identifier of the contact channel"
                    },
                    "value": {
                      "type": "string",
                      "example": "johndoe@example.com",
                      "description": "The value of the contact channel. For email, this should be a valid email address."
                    },
                    "type": {
                      "type": "string",
                      "example": "email",
                      "description": "The type of the contact channel. Currently only \"email\" is supported."
                    },
                    "used_for_auth": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the contact channel is used for authentication. If this is set to `true`, the user will be able to sign in with the contact channel with password or OTP."
                    },
                    "is_verified": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the contact channel has been verified. If this is set to `true`, the contact channel has been verified to belong to the user."
                    },
                    "is_primary": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the contact channel is the primary contact channel. If this is set to `true`, it will be used for authentication and notifications by default."
                    }
                  },
                  "required": [
                    "user_id",
                    "id",
                    "value",
                    "type",
                    "used_for_auth",
                    "is_verified",
                    "is_primary"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/contact-channels/{user_id}/{contact_channel_id}/send-verification-code": {
      "post": {
        "summary": "Send contact channel verification code",
        "description": "Send a code to the user's contact channel for verifying the contact channel.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "me",
              "description": "The user to send the verification code to."
            },
            "description": "The user to send the verification code to.",
            "required": true
          },
          {
            "name": "contact_channel_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "b3d396b8-c574-4c80-97b3-50031675ceb2",
              "description": "The contact channel to send the verification code to."
            },
            "description": "The contact channel to send the verification code to.",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "callback_url": {
                    "type": "string",
                    "example": "https://example.com/handler/email-verification",
                    "description": "The base callback URL to construct a verification link for the verification e-mail. A query parameter `code` with the verification code will be appended to it. The page should then make a request to the `/contact-channels/verify` endpoint."
                  }
                },
                "required": [
                  "callback_url"
                ],
                "example": {
                  "callback_url": "https://example.com/handler/email-verification"
                }
              }
            }
          }
        },
        "tags": [
          "Contact Channels"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Always equal to true.",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/oauth/token": {
      "post": {
        "summary": "OAuth token endpoints",
        "description": "This endpoint is used to exchange an authorization code or refresh token for an access token.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "type": "string"
                  }
                },
                "required": [
                  "grant_type"
                ],
                "example": {}
              }
            }
          }
        },
        "tags": [
          "Oauth"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/auth/oauth/authorize/{provider_id}": {
      "get": {
        "summary": "OAuth authorize endpoint",
        "description": "This endpoint is used to initiate the OAuth authorization flow. there are two purposes for this endpoint: 1. Authenticate a user with an OAuth provider. 2. Link an existing user with an OAuth provider.",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "authenticate"
            },
            "required": false
          },
          {
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "default": ""
            },
            "required": false
          },
          {
            "name": "provider_scope",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "error_redirect_uri",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "after_callback_redirect_url",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "client_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "client_secret",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "scope",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "grant_type",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "code_challenge",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "code_challenge_method",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "response_type",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "provider_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "Oauth"
        ],
        "responses": {
          "302": {
            "description": "No content"
          }
        }
      }
    },
    "/auth/otp/sign-in": {
      "post": {
        "summary": "Sign in with a code",
        "description": "",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2",
                    "description": "A 45-character verification code. For magic links, this is the code found in the \"code\" URL query parameter. For OTP, this is formed by concatenating the 6-digit code entered by the user with the nonce (received during code creation)"
                  }
                },
                "required": [
                  "code"
                ],
                "example": {
                  "code": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2"
                }
              }
            }
          }
        },
        "tags": [
          "OTP"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "refresh_token": {
                      "type": "string",
                      "example": "i8ns3aq2...14y",
                      "description": "Long-lived refresh token that can be used to obtain a new access token"
                    },
                    "access_token": {
                      "type": "string",
                      "example": "eyJhmMiJB2TO...diI4QT",
                      "description": "Short-lived access token that can be used to authenticate the user"
                    },
                    "is_new_user": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the user is a new user"
                    },
                    "user_id": {
                      "type": "string",
                      "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "description": "The unique identifier of the user"
                    }
                  },
                  "required": [
                    "refresh_token",
                    "access_token",
                    "is_new_user",
                    "user_id"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/otp/send-sign-in-code": {
      "post": {
        "summary": "Send sign-in code",
        "description": "Send a code to the user's email address for sign-in.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "johndoe@example.com",
                    "description": "The email to sign in with."
                  },
                  "callback_url": {
                    "type": "string",
                    "example": "https://example.com/handler/magic-link-callback",
                    "description": "The base callback URL to construct the magic link from. A query parameter `code` with the verification code will be appended to it. The page should then make a request to the `/auth/otp/sign-in` endpoint."
                  }
                },
                "required": [
                  "email",
                  "callback_url"
                ],
                "example": {
                  "email": "johndoe@example.com",
                  "callback_url": "https://example.com/handler/magic-link-callback"
                }
              }
            }
          }
        },
        "tags": [
          "OTP"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nonce": {
                      "type": "string",
                      "example": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2",
                      "description": "A token that must be stored temporarily and provided when verifying the 6-digit code"
                    }
                  },
                  "required": [
                    "nonce"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/mfa/sign-in": {
      "post": {
        "summary": "MFA sign in",
        "description": "Complete multi-factor authorization to sign in, with a TOTP and an MFA attempt code",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "totp": {
                    "type": "string"
                  },
                  "code": {
                    "type": "string",
                    "example": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2",
                    "description": "A 45 character code"
                  }
                },
                "required": [
                  "type",
                  "totp",
                  "code"
                ],
                "example": {
                  "code": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2"
                }
              }
            }
          }
        },
        "tags": [
          "OTP"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "refresh_token": {
                      "type": "string",
                      "example": "i8ns3aq2...14y",
                      "description": "Long-lived refresh token that can be used to obtain a new access token"
                    },
                    "access_token": {
                      "type": "string",
                      "example": "eyJhmMiJB2TO...diI4QT",
                      "description": "Short-lived access token that can be used to authenticate the user"
                    },
                    "is_new_user": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the user is a new user"
                    },
                    "user_id": {
                      "type": "string",
                      "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "description": "The unique identifier of the user"
                    }
                  },
                  "required": [
                    "refresh_token",
                    "access_token",
                    "is_new_user",
                    "user_id"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/otp/sign-in/check-code": {
      "post": {
        "summary": "Check sign in code",
        "description": "Check if a sign in code is valid without using it",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2",
                    "description": "A 45-character verification code. For magic links, this is the code found in the \"code\" URL query parameter. For OTP, this is formed by concatenating the 6-digit code entered by the user with the nonce (received during code creation)"
                  }
                },
                "required": [
                  "code"
                ],
                "example": {
                  "code": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2"
                }
              }
            }
          }
        },
        "tags": [
          "OTP"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "is_code_valid": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "is_code_valid"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/password/update": {
      "post": {
        "summary": "Update password",
        "description": "Update the password of the current user, requires the old password",
        "parameters": [
          {
            "name": "x-stack-refresh-token",
            "in": "header",
            "type": "string",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "old_password": {
                    "type": "string"
                  },
                  "new_password": {
                    "type": "string"
                  }
                },
                "required": [
                  "old_password",
                  "new_password"
                ],
                "example": {}
              }
            }
          }
        },
        "tags": [
          "Password"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Always equal to true.",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/password/sign-up": {
      "post": {
        "summary": "Sign up with email and password",
        "description": "Create a new account with email and password",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "johndoe@example.com",
                    "description": "The email to sign in with."
                  },
                  "password": {
                    "type": "string"
                  },
                  "verification_callback_url": {
                    "type": "string",
                    "example": "https://example.com/handler/email-verification",
                    "description": "The base callback URL to construct a verification link for the verification e-mail. A query parameter `code` with the verification code will be appended to it. The page should then make a request to the `/contact-channels/verify` endpoint."
                  }
                },
                "required": [
                  "email",
                  "password",
                  "verification_callback_url"
                ],
                "example": {
                  "email": "johndoe@example.com",
                  "verification_callback_url": "https://example.com/handler/email-verification"
                }
              }
            }
          }
        },
        "tags": [
          "Password"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "refresh_token": {
                      "type": "string"
                    },
                    "user_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "access_token",
                    "refresh_token",
                    "user_id"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/password/sign-in": {
      "post": {
        "summary": "Sign in with email and password",
        "description": "Sign in to an account with email and password",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "password"
                ],
                "example": {}
              }
            }
          }
        },
        "tags": [
          "Password"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "refresh_token": {
                      "type": "string"
                    },
                    "user_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "access_token",
                    "refresh_token",
                    "user_id"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/password/set": {
      "post": {
        "summary": "Set password",
        "description": "Set a new password for the current user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "password"
                ],
                "example": {}
              }
            }
          }
        },
        "tags": [
          "Password"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Always equal to true.",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/password/send-reset-code": {
      "post": {
        "summary": "Send reset password code",
        "description": "Send a code to the user's email address for resetting the password.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "callback_url": {
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "callback_url"
                ],
                "example": {}
              }
            }
          }
        },
        "tags": [
          "Password"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/password/reset": {
      "post": {
        "summary": "Reset password with a code",
        "description": "Reset password with a code",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string"
                  },
                  "code": {
                    "type": "string",
                    "example": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2",
                    "description": "A 45 character code"
                  }
                },
                "required": [
                  "password",
                  "code"
                ],
                "example": {
                  "code": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2"
                }
              }
            }
          }
        },
        "tags": [
          "Password"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Always equal to true.",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/password/reset/check-code": {
      "post": {
        "summary": "Check reset password code",
        "description": "Check if a reset password code is valid without using it",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2",
                    "description": "A 45 character code"
                  }
                },
                "required": [
                  "code"
                ],
                "example": {
                  "code": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2"
                }
              }
            }
          }
        },
        "tags": [
          "Password"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "is_code_valid": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "is_code_valid"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/team-permissions": {
      "get": {
        "summary": "List team permissions of a user",
        "description": "Query and filter the permission with `team_id`, `user_id`, and `permission_id`. Note that this might contain the permissions with the same permission ID across different teams and users. `(team_id, user_id, permission_id)` together uniquely identify a permission.",
        "parameters": [
          {
            "name": "team_id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "cce084a3-28b7-418e-913e-c8ee6d802ea4",
              "description": "Filter with the team ID. If set, only the permissions of the members in a specific team will be returned."
            },
            "description": "Filter with the team ID. If set, only the permissions of the members in a specific team will be returned.",
            "required": false
          },
          {
            "name": "user_id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "me",
              "description": "Filter with the user ID. If set, only the permissions this user has will be returned. Client request must set `user_id=me`"
            },
            "description": "Filter with the user ID. If set, only the permissions this user has will be returned. Client request must set `user_id=me`",
            "required": false
          },
          {
            "name": "permission_id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "16399452-c4f3-4554-8e44-c2d67bb60360",
              "description": "Filter with the permission ID. If set, only the permissions with this specific ID will be returned"
            },
            "description": "Filter with the permission ID. If set, only the permissions with this specific ID will be returned",
            "required": false
          },
          {
            "name": "recursive",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "true",
              "description": "Whether to list permissions recursively. If set to `false`, only the permission the users directly have will be listed. If set to `true` all the direct and indirect permissions will be listed."
            },
            "description": "Whether to list permissions recursively. If set to `false`, only the permission the users directly have will be listed. If set to `true` all the direct and indirect permissions will be listed.",
            "required": false
          }
        ],
        "tags": [
          "Permissions"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "read_secret_info",
                            "description": "The permission ID used to uniquely identify a permission. Can either be a custom permission with lowercase letters, numbers, `:`, and `_` characters, or one of the system permissions: `$update_team`, `$delete_team`, `$read_members`, `$remove_members`, `$invite_members`, `$manage_api_keys`"
                          },
                          "user_id": {
                            "type": "string",
                            "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                            "description": "The unique identifier of the user"
                          },
                          "team_id": {
                            "type": "string",
                            "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                            "description": "The unique identifier of the team"
                          }
                        },
                        "required": [
                          "id",
                          "user_id",
                          "team_id"
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "example": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                          "description": "The cursor to fetch the next page of results. null if there is no next page."
                        }
                      },
                      "required": []
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/project-permissions": {
      "get": {
        "summary": "List project permissions",
        "description": "Query and filter the permission with `user_id` and `permission_id`. `(user_id, permission_id)` together uniquely identify a permission.",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "me",
              "description": "Filter with the user ID. If set, only the permissions this user has will be returned. Client request must set `user_id=me`"
            },
            "description": "Filter with the user ID. If set, only the permissions this user has will be returned. Client request must set `user_id=me`",
            "required": false
          },
          {
            "name": "permission_id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "16399452-c4f3-4554-8e44-c2d67bb60360",
              "description": "Filter with the permission ID. If set, only the permissions with this specific ID will be returned"
            },
            "description": "Filter with the permission ID. If set, only the permissions with this specific ID will be returned",
            "required": false
          },
          {
            "name": "recursive",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "true",
              "description": "Whether to list permissions recursively. If set to `false`, only the permission the users directly have will be listed. If set to `true` all the direct and indirect permissions will be listed."
            },
            "description": "Whether to list permissions recursively. If set to `false`, only the permission the users directly have will be listed. If set to `true` all the direct and indirect permissions will be listed.",
            "required": false
          }
        ],
        "tags": [
          "Permissions"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "read_secret_info",
                            "description": "The permission ID used to uniquely identify a permission. Can either be a custom permission with lowercase letters, numbers, `:`, and `_` characters, or one of the system permissions: `$update_team`, `$delete_team`, `$read_members`, `$remove_members`, `$invite_members`, `$manage_api_keys`"
                          },
                          "user_id": {
                            "type": "string",
                            "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                            "description": "The unique identifier of the user"
                          }
                        },
                        "required": [
                          "id",
                          "user_id"
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "example": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                          "description": "The cursor to fetch the next page of results. null if there is no next page."
                        }
                      },
                      "required": []
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/project-permissions/{user_id}/{permission_id}": {
      "post": {
        "summary": "Grant a global permission to a user",
        "description": "Grant a global permission to a user (the permission must be created first on the Stack dashboard)",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
              "description": "The ID of the user, or the special value `me` for the currently authenticated user"
            },
            "description": "The ID of the user, or the special value `me` for the currently authenticated user",
            "required": false
          },
          {
            "name": "permission_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "read_secret_info",
              "description": "The permission ID used to uniquely identify a permission. Can either be a custom permission with lowercase letters, numbers, `:`, and `_` characters, or one of the system permissions: `$update_team`, `$delete_team`, `$read_members`, `$remove_members`, `$invite_members`, `$manage_api_keys`"
            },
            "description": "The permission ID used to uniquely identify a permission. Can either be a custom permission with lowercase letters, numbers, `:`, and `_` characters, or one of the system permissions: `$update_team`, `$delete_team`, `$read_members`, `$remove_members`, `$invite_members`, `$manage_api_keys`",
            "required": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "example": {}
              }
            }
          }
        },
        "tags": [
          "Permissions"
        ],
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "read_secret_info",
                      "description": "The permission ID used to uniquely identify a permission. Can either be a custom permission with lowercase letters, numbers, `:`, and `_` characters, or one of the system permissions: `$update_team`, `$delete_team`, `$read_members`, `$remove_members`, `$invite_members`, `$manage_api_keys`"
                    },
                    "user_id": {
                      "type": "string",
                      "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "description": "The unique identifier of the user"
                    }
                  },
                  "required": [
                    "id",
                    "user_id"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Revoke a global permission from a user",
        "description": "Revoke a global permission from a user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
              "description": "The ID of the user, or the special value `me` for the currently authenticated user"
            },
            "description": "The ID of the user, or the special value `me` for the currently authenticated user",
            "required": true
          },
          {
            "name": "permission_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "read_secret_info",
              "description": "The permission ID used to uniquely identify a permission. Can either be a custom permission with lowercase letters, numbers, `:`, and `_` characters, or one of the system permissions: `$update_team`, `$delete_team`, `$read_members`, `$remove_members`, `$invite_members`, `$manage_api_keys`"
            },
            "description": "The permission ID used to uniquely identify a permission. Can either be a custom permission with lowercase letters, numbers, `:`, and `_` characters, or one of the system permissions: `$update_team`, `$delete_team`, `$read_members`, `$remove_members`, `$invite_members`, `$manage_api_keys`",
            "required": true
          }
        ],
        "tags": [
          "Permissions"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Always equal to true.",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/team-permissions/{team_id}/{user_id}/{permission_id}": {
      "post": {
        "summary": "Grant a team permission to a user",
        "description": "Grant a team permission to a user (the team permission must be created first on the Stack dashboard)",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
              "description": "The ID of the user, or the special value `me` for the currently authenticated user"
            },
            "description": "The ID of the user, or the special value `me` for the currently authenticated user",
            "required": false
          },
          {
            "name": "permission_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "read_secret_info",
              "description": "The permission ID used to uniquely identify a permission. Can either be a custom permission with lowercase letters, numbers, `:`, and `_` characters, or one of the system permissions: `$update_team`, `$delete_team`, `$read_members`, `$remove_members`, `$invite_members`, `$manage_api_keys`"
            },
            "description": "The permission ID used to uniquely identify a permission. Can either be a custom permission with lowercase letters, numbers, `:`, and `_` characters, or one of the system permissions: `$update_team`, `$delete_team`, `$read_members`, `$remove_members`, `$invite_members`, `$manage_api_keys`",
            "required": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "example": {}
              }
            }
          }
        },
        "tags": [
          "Permissions"
        ],
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "read_secret_info",
                      "description": "The permission ID used to uniquely identify a permission. Can either be a custom permission with lowercase letters, numbers, `:`, and `_` characters, or one of the system permissions: `$update_team`, `$delete_team`, `$read_members`, `$remove_members`, `$invite_members`, `$manage_api_keys`"
                    },
                    "user_id": {
                      "type": "string",
                      "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "description": "The unique identifier of the user"
                    },
                    "team_id": {
                      "type": "string",
                      "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                      "description": "The unique identifier of the team"
                    }
                  },
                  "required": [
                    "id",
                    "user_id",
                    "team_id"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Revoke a team permission from a user",
        "description": "Revoke a team permission from a user",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
              "description": "The ID of the user, or the special value `me` for the currently authenticated user"
            },
            "description": "The ID of the user, or the special value `me` for the currently authenticated user",
            "required": true
          },
          {
            "name": "permission_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "read_secret_info",
              "description": "The permission ID used to uniquely identify a permission. Can either be a custom permission with lowercase letters, numbers, `:`, and `_` characters, or one of the system permissions: `$update_team`, `$delete_team`, `$read_members`, `$remove_members`, `$invite_members`, `$manage_api_keys`"
            },
            "description": "The permission ID used to uniquely identify a permission. Can either be a custom permission with lowercase letters, numbers, `:`, and `_` characters, or one of the system permissions: `$update_team`, `$delete_team`, `$read_members`, `$remove_members`, `$invite_members`, `$manage_api_keys`",
            "required": true
          }
        ],
        "tags": [
          "Permissions"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Always equal to true.",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/projects/current": {
      "get": {
        "summary": "Get the current project",
        "description": "Get the current project information including display name, OAuth providers and authentication methods. Useful for display the available login options to the user.",
        "parameters": [],
        "tags": [
          "Projects"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "e0b52f4d-dece-408c-af49-d23061bb0f8d",
                      "description": "The unique identifier of the project"
                    },
                    "display_name": {
                      "type": "string",
                      "example": "MyMusic",
                      "description": "Human-readable project display name. This is not a unique identifier."
                    }
                  },
                  "required": [
                    "id",
                    "display_name"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/sessions": {
      "get": {
        "summary": "List sessions",
        "description": "List all sessions for the current user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
              "description": "The ID of the user, or the special value `me` for the currently authenticated user"
            },
            "description": "The ID of the user, or the special value `me` for the currently authenticated user",
            "required": true
          }
        ],
        "tags": [
          "Sessions"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "user_id": {
                            "type": "string"
                          },
                          "created_at": {
                            "type": "number"
                          },
                          "is_impersonation": {
                            "type": "boolean"
                          },
                          "last_used_at": {
                            "type": "number"
                          },
                          "is_current_session": {
                            "type": "boolean"
                          },
                          "last_used_at_end_user_ip_info": {
                            "type": "object",
                            "properties": {
                              "ip": {
                                "type": "string"
                              },
                              "countryCode": {
                                "type": "string"
                              },
                              "regionCode": {
                                "type": "string"
                              },
                              "cityName": {
                                "type": "string"
                              },
                              "latitude": {
                                "type": "number"
                              },
                              "longitude": {
                                "type": "number"
                              },
                              "tzIdentifier": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "ip"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "user_id",
                          "created_at",
                          "is_impersonation"
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "example": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                          "description": "The cursor to fetch the next page of results. null if there is no next page."
                        }
                      },
                      "required": []
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create session",
        "description": "Create a new session for a given user. This will return a refresh token that can be used to impersonate the user.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "string",
                    "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                    "description": "The ID of the user, or the special value `me` for the currently authenticated user"
                  },
                  "expires_in_millis": {
                    "type": "number",
                    "default": 31536000000
                  },
                  "is_impersonation": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "user_id"
                ],
                "example": {
                  "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                }
              }
            }
          }
        },
        "tags": [
          "Sessions"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "refresh_token": {
                      "type": "string"
                    },
                    "access_token": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "refresh_token",
                    "access_token"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/sessions/current": {
      "delete": {
        "summary": "Sign out of the current session",
        "description": "Sign out of the current session and invalidate the refresh token",
        "parameters": [],
        "tags": [
          "Sessions"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Always equal to true.",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/sessions/{id}": {
      "delete": {
        "summary": "Delete session",
        "description": "Delete a session by ID.",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
              "description": "The ID of the user, or the special value `me` for the currently authenticated user"
            },
            "description": "The ID of the user, or the special value `me` for the currently authenticated user",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "Sessions"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Always equal to true.",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/sessions/current/refresh": {
      "post": {
        "summary": "Refresh access token",
        "description": "Get a new access token using a refresh token",
        "parameters": [
          {
            "name": "x-stack-refresh-token",
            "in": "header",
            "type": "string",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "Sessions"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "access_token"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/teams": {
      "get": {
        "summary": "List teams",
        "description": "List all the teams in the project.",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "me",
              "description": "Filter for the teams that the user is a member of. Can be either `me` or an ID. Must be `me` in the client API"
            },
            "description": "Filter for the teams that the user is a member of. Can be either `me` or an ID. Must be `me` in the client API",
            "required": false
          }
        ],
        "tags": [
          "Teams"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "created_at_millis": {
                            "type": "number",
                            "example": 1630000000000,
                            "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)"
                          },
                          "server_metadata": {
                            "type": "object",
                            "example": {
                              "key": "value"
                            },
                            "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here."
                          },
                          "id": {
                            "type": "string",
                            "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                            "description": "The unique identifier of the team"
                          },
                          "display_name": {
                            "type": "string",
                            "example": "My Team",
                            "description": "Human-readable team display name. This is not a unique identifier."
                          },
                          "profile_image_url": {
                            "type": "string",
                            "example": "https://example.com/image.jpg",
                            "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                          },
                          "client_metadata": {
                            "type": "object",
                            "example": {
                              "key": "value"
                            },
                            "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                          },
                          "client_read_only_metadata": {
                            "type": "object",
                            "example": {
                              "key": "value"
                            },
                            "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                          }
                        },
                        "required": [
                          "created_at_millis",
                          "id",
                          "display_name"
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "example": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                          "description": "The cursor to fetch the next page of results. null if there is no next page."
                        }
                      },
                      "required": []
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a team",
        "description": "Create a new team and optionally add the current user as a member.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "display_name": {
                    "type": "string",
                    "example": "My Team",
                    "description": "Human-readable team display name. This is not a unique identifier."
                  },
                  "creator_user_id": {
                    "type": "string",
                    "example": "me",
                    "description": "The ID of the creator of the team. If not specified, the user will not be added to the team. Can be either \"me\" or the ID of the user. Only used on the client side."
                  },
                  "client_read_only_metadata": {
                    "type": "object",
                    "example": {
                      "key": "value"
                    },
                    "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                  },
                  "server_metadata": {
                    "type": "object",
                    "example": {
                      "key": "value"
                    },
                    "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here."
                  },
                  "profile_image_url": {
                    "type": "string",
                    "example": "https://example.com/image.jpg",
                    "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                  },
                  "client_metadata": {
                    "type": "object",
                    "example": {
                      "key": "value"
                    },
                    "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                  }
                },
                "required": [
                  "display_name"
                ],
                "example": {
                  "display_name": "My Team",
                  "creator_user_id": "me",
                  "client_read_only_metadata": {
                    "key": "value"
                  },
                  "server_metadata": {
                    "key": "value"
                  },
                  "profile_image_url": "https://example.com/image.jpg",
                  "client_metadata": {
                    "key": "value"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created_at_millis": {
                      "type": "number",
                      "example": 1630000000000,
                      "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)"
                    },
                    "server_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here."
                    },
                    "id": {
                      "type": "string",
                      "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                      "description": "The unique identifier of the team"
                    },
                    "display_name": {
                      "type": "string",
                      "example": "My Team",
                      "description": "Human-readable team display name. This is not a unique identifier."
                    },
                    "profile_image_url": {
                      "type": "string",
                      "example": "https://example.com/image.jpg",
                      "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                    },
                    "client_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                    },
                    "client_read_only_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                    }
                  },
                  "required": [
                    "created_at_millis",
                    "id",
                    "display_name"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/team-member-profiles": {
      "get": {
        "summary": "List team members profiles",
        "description": "List team members profiles and filter by team ID and user ID",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "team_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "tags": [
          "Teams"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "user": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                                "description": "The unique identifier of the user"
                              },
                              "primary_email": {
                                "type": "string",
                                "example": "johndoe@example.com",
                                "description": "Primary email"
                              },
                              "primary_email_verified": {
                                "type": "boolean",
                                "example": true,
                                "description": "Whether the primary email has been verified to belong to this user"
                              },
                              "primary_email_auth_enabled": {
                                "type": "boolean",
                                "example": true,
                                "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP"
                              },
                              "display_name": {
                                "type": "string",
                                "example": "John Doe",
                                "description": "Human-readable user display name. This is not a unique identifier."
                              },
                              "selected_team": {
                                "type": "object",
                                "properties": {
                                  "created_at_millis": {
                                    "type": "number",
                                    "example": 1630000000000,
                                    "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)"
                                  },
                                  "server_metadata": {
                                    "type": "object",
                                    "example": {
                                      "key": "value"
                                    },
                                    "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here."
                                  },
                                  "id": {
                                    "type": "string",
                                    "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                                    "description": "The unique identifier of the team"
                                  },
                                  "display_name": {
                                    "type": "string",
                                    "example": "My Team",
                                    "description": "Human-readable team display name. This is not a unique identifier."
                                  },
                                  "profile_image_url": {
                                    "type": "string",
                                    "example": "https://example.com/image.jpg",
                                    "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                                  },
                                  "client_metadata": {
                                    "type": "object",
                                    "example": {
                                      "key": "value"
                                    },
                                    "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                                  },
                                  "client_read_only_metadata": {
                                    "type": "object",
                                    "example": {
                                      "key": "value"
                                    },
                                    "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                                  }
                                },
                                "required": [
                                  "created_at_millis",
                                  "id",
                                  "display_name"
                                ]
                              },
                              "selected_team_id": {
                                "type": "string",
                                "example": "team-id",
                                "description": "ID of the team currently selected by the user"
                              },
                              "profile_image_url": {
                                "type": "string",
                                "example": "https://example.com/image.jpg",
                                "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                              },
                              "signed_up_at_millis": {
                                "type": "number",
                                "example": 1630000000000,
                                "description": "The time the user signed up (identify) => `(the number of milliseconds since epoch, January 1, 1970, UTC)`"
                              },
                              "client_metadata": {
                                "type": "object",
                                "example": {
                                  "key": "value"
                                },
                                "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                              },
                              "client_read_only_metadata": {
                                "type": "object",
                                "example": {
                                  "key": "value"
                                },
                                "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                              },
                              "server_metadata": {
                                "type": "object",
                                "example": {
                                  "key": "value"
                                },
                                "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here."
                              },
                              "last_active_at_millis": {
                                "type": "number",
                                "example": 1630000000000,
                                "description": "The time the user was last active (identify) => `(the number of milliseconds since epoch, January 1, 1970, UTC)`"
                              },
                              "is_anonymous": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "id",
                              "primary_email_verified",
                              "primary_email_auth_enabled",
                              "signed_up_at_millis",
                              "last_active_at_millis",
                              "is_anonymous"
                            ]
                          },
                          "team_id": {
                            "type": "string",
                            "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                            "description": "The unique identifier of the team"
                          },
                          "user_id": {
                            "type": "string",
                            "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                            "description": "The unique identifier of the user"
                          },
                          "display_name": {
                            "type": "string",
                            "example": "John Doe",
                            "description": "Human-readable team member display name. This is not a unique identifier. Note that this is separate from the display_name of the user."
                          },
                          "profile_image_url": {
                            "type": "string",
                            "example": "https://example.com/image.jpg",
                            "description": "URL of the profile image for team member. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                          }
                        },
                        "required": [
                          "user",
                          "team_id",
                          "user_id"
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "example": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                          "description": "The cursor to fetch the next page of results. null if there is no next page."
                        }
                      },
                      "required": []
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/team-invitations": {
      "get": {
        "summary": "List team invitations",
        "description": "",
        "parameters": [
          {
            "name": "team_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "Teams"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "team_id": {
                            "type": "string",
                            "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                            "description": "The unique identifier of the team"
                          },
                          "expires_at_millis": {
                            "type": "number"
                          },
                          "recipient_email": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "team_id",
                          "expires_at_millis",
                          "recipient_email"
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "example": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                          "description": "The cursor to fetch the next page of results. null if there is no next page."
                        }
                      },
                      "required": []
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/teams/{team_id}": {
      "get": {
        "summary": "Get a team",
        "description": "Get a team by ID.",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "Teams"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created_at_millis": {
                      "type": "number",
                      "example": 1630000000000,
                      "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)"
                    },
                    "server_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here."
                    },
                    "id": {
                      "type": "string",
                      "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                      "description": "The unique identifier of the team"
                    },
                    "display_name": {
                      "type": "string",
                      "example": "My Team",
                      "description": "Human-readable team display name. This is not a unique identifier."
                    },
                    "profile_image_url": {
                      "type": "string",
                      "example": "https://example.com/image.jpg",
                      "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                    },
                    "client_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                    },
                    "client_read_only_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                    }
                  },
                  "required": [
                    "created_at_millis",
                    "id",
                    "display_name"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a team",
        "description": "Delete a team by ID.",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "Teams"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Always equal to true.",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a team",
        "description": "Update the team information by ID.",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "client_read_only_metadata": {
                    "type": "object",
                    "example": {
                      "key": "value"
                    },
                    "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                  },
                  "server_metadata": {
                    "type": "object",
                    "example": {
                      "key": "value"
                    },
                    "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here."
                  },
                  "display_name": {
                    "type": "string",
                    "example": "My Team",
                    "description": "Human-readable team display name. This is not a unique identifier."
                  },
                  "profile_image_url": {
                    "type": "string",
                    "example": "https://example.com/image.jpg",
                    "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                  },
                  "client_metadata": {
                    "type": "object",
                    "example": {
                      "key": "value"
                    },
                    "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                  }
                },
                "example": {
                  "client_read_only_metadata": {
                    "key": "value"
                  },
                  "server_metadata": {
                    "key": "value"
                  },
                  "display_name": "My Team",
                  "profile_image_url": "https://example.com/image.jpg",
                  "client_metadata": {
                    "key": "value"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created_at_millis": {
                      "type": "number",
                      "example": 1630000000000,
                      "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)"
                    },
                    "server_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here."
                    },
                    "id": {
                      "type": "string",
                      "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                      "description": "The unique identifier of the team"
                    },
                    "display_name": {
                      "type": "string",
                      "example": "My Team",
                      "description": "Human-readable team display name. This is not a unique identifier."
                    },
                    "profile_image_url": {
                      "type": "string",
                      "example": "https://example.com/image.jpg",
                      "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                    },
                    "client_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                    },
                    "client_read_only_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                    }
                  },
                  "required": [
                    "created_at_millis",
                    "id",
                    "display_name"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/team-invitations/send-code": {
      "post": {
        "summary": "Send an email to invite a user to a team",
        "description": "The user receiving this email can join the team by clicking on the link in the email. If the user does not have an account yet, they will be prompted to create one.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "team_id": {
                    "type": "string",
                    "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                    "description": "The unique identifier of the team"
                  },
                  "email": {
                    "type": "string",
                    "example": "johndoe@example.com",
                    "description": "The email of the user to invite."
                  },
                  "callback_url": {
                    "type": "string",
                    "example": "https://example.com/handler/team-invitation",
                    "description": "The base callback URL to construct an invite link with. A query parameter `code` with the verification code will be appended to it. The page should then make a request to the `/team-invitations/accept` endpoint."
                  }
                },
                "required": [
                  "team_id",
                  "email",
                  "callback_url"
                ],
                "example": {
                  "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                  "email": "johndoe@example.com",
                  "callback_url": "https://example.com/handler/team-invitation"
                }
              }
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "id"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/team-invitations/accept": {
      "post": {
        "summary": "Accept the team invitation",
        "description": "Accept invitation and add user to the team",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2",
                    "description": "A 45 character code"
                  }
                },
                "required": [
                  "code"
                ],
                "example": {
                  "code": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2"
                }
              }
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        }
      }
    },
    "/team-invitations/{id}": {
      "delete": {
        "summary": "Delete a team invitation",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "Teams"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Always equal to true.",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/team-memberships/{team_id}/{user_id}": {
      "post": {
        "summary": "Add a user to a team",
        "description": "",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
              "description": "The ID of the user, or the special value `me` for the currently authenticated user"
            },
            "description": "The ID of the user, or the special value `me` for the currently authenticated user",
            "required": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "example": {}
              }
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "team_id": {
                      "type": "string"
                    },
                    "user_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "team_id",
                    "user_id"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove a user from a team",
        "description": "",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
              "description": "The ID of the user, or the special value `me` for the currently authenticated user"
            },
            "description": "The ID of the user, or the special value `me` for the currently authenticated user",
            "required": true
          }
        ],
        "tags": [
          "Teams"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Always equal to true.",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/team-member-profiles/{team_id}/{user_id}": {
      "get": {
        "summary": "Get a team member profile",
        "description": "Get a team member profile by user ID",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
              "description": "The ID of the user, or the special value `me` for the currently authenticated user"
            },
            "description": "The ID of the user, or the special value `me` for the currently authenticated user",
            "required": true
          }
        ],
        "tags": [
          "Teams"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                          "description": "The unique identifier of the user"
                        },
                        "primary_email": {
                          "type": "string",
                          "example": "johndoe@example.com",
                          "description": "Primary email"
                        },
                        "primary_email_verified": {
                          "type": "boolean",
                          "example": true,
                          "description": "Whether the primary email has been verified to belong to this user"
                        },
                        "primary_email_auth_enabled": {
                          "type": "boolean",
                          "example": true,
                          "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP"
                        },
                        "display_name": {
                          "type": "string",
                          "example": "John Doe",
                          "description": "Human-readable user display name. This is not a unique identifier."
                        },
                        "selected_team": {
                          "type": "object",
                          "properties": {
                            "created_at_millis": {
                              "type": "number",
                              "example": 1630000000000,
                              "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)"
                            },
                            "server_metadata": {
                              "type": "object",
                              "example": {
                                "key": "value"
                              },
                              "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here."
                            },
                            "id": {
                              "type": "string",
                              "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                              "description": "The unique identifier of the team"
                            },
                            "display_name": {
                              "type": "string",
                              "example": "My Team",
                              "description": "Human-readable team display name. This is not a unique identifier."
                            },
                            "profile_image_url": {
                              "type": "string",
                              "example": "https://example.com/image.jpg",
                              "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                            },
                            "client_metadata": {
                              "type": "object",
                              "example": {
                                "key": "value"
                              },
                              "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                            },
                            "client_read_only_metadata": {
                              "type": "object",
                              "example": {
                                "key": "value"
                              },
                              "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                            }
                          },
                          "required": [
                            "created_at_millis",
                            "id",
                            "display_name"
                          ]
                        },
                        "selected_team_id": {
                          "type": "string",
                          "example": "team-id",
                          "description": "ID of the team currently selected by the user"
                        },
                        "profile_image_url": {
                          "type": "string",
                          "example": "https://example.com/image.jpg",
                          "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                        },
                        "signed_up_at_millis": {
                          "type": "number",
                          "example": 1630000000000,
                          "description": "The time the user signed up (identify) => `(the number of milliseconds since epoch, January 1, 1970, UTC)`"
                        },
                        "client_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                        },
                        "client_read_only_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                        },
                        "server_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here."
                        },
                        "last_active_at_millis": {
                          "type": "number",
                          "example": 1630000000000,
                          "description": "The time the user was last active (identify) => `(the number of milliseconds since epoch, January 1, 1970, UTC)`"
                        },
                        "is_anonymous": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "id",
                        "primary_email_verified",
                        "primary_email_auth_enabled",
                        "signed_up_at_millis",
                        "last_active_at_millis",
                        "is_anonymous"
                      ]
                    },
                    "team_id": {
                      "type": "string",
                      "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                      "description": "The unique identifier of the team"
                    },
                    "user_id": {
                      "type": "string",
                      "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "description": "The unique identifier of the user"
                    },
                    "display_name": {
                      "type": "string",
                      "example": "John Doe",
                      "description": "Human-readable team member display name. This is not a unique identifier. Note that this is separate from the display_name of the user."
                    },
                    "profile_image_url": {
                      "type": "string",
                      "example": "https://example.com/image.jpg",
                      "description": "URL of the profile image for team member. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                    }
                  },
                  "required": [
                    "user",
                    "team_id",
                    "user_id"
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a team member profile",
        "description": "Update a team member profile by user ID",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
              "description": "The ID of the user, or the special value `me` for the currently authenticated user"
            },
            "description": "The ID of the user, or the special value `me` for the currently authenticated user",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "display_name": {
                    "type": "string",
                    "example": "John Doe",
                    "description": "Human-readable team member display name. This is not a unique identifier. Note that this is separate from the display_name of the user."
                  },
                  "profile_image_url": {
                    "type": "string",
                    "example": "https://example.com/image.jpg",
                    "description": "URL of the profile image for team member. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                  }
                },
                "example": {
                  "display_name": "John Doe",
                  "profile_image_url": "https://example.com/image.jpg"
                }
              }
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                          "description": "The unique identifier of the user"
                        },
                        "primary_email": {
                          "type": "string",
                          "example": "johndoe@example.com",
                          "description": "Primary email"
                        },
                        "primary_email_verified": {
                          "type": "boolean",
                          "example": true,
                          "description": "Whether the primary email has been verified to belong to this user"
                        },
                        "primary_email_auth_enabled": {
                          "type": "boolean",
                          "example": true,
                          "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP"
                        },
                        "display_name": {
                          "type": "string",
                          "example": "John Doe",
                          "description": "Human-readable user display name. This is not a unique identifier."
                        },
                        "selected_team": {
                          "type": "object",
                          "properties": {
                            "created_at_millis": {
                              "type": "number",
                              "example": 1630000000000,
                              "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)"
                            },
                            "server_metadata": {
                              "type": "object",
                              "example": {
                                "key": "value"
                              },
                              "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here."
                            },
                            "id": {
                              "type": "string",
                              "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                              "description": "The unique identifier of the team"
                            },
                            "display_name": {
                              "type": "string",
                              "example": "My Team",
                              "description": "Human-readable team display name. This is not a unique identifier."
                            },
                            "profile_image_url": {
                              "type": "string",
                              "example": "https://example.com/image.jpg",
                              "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                            },
                            "client_metadata": {
                              "type": "object",
                              "example": {
                                "key": "value"
                              },
                              "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                            },
                            "client_read_only_metadata": {
                              "type": "object",
                              "example": {
                                "key": "value"
                              },
                              "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                            }
                          },
                          "required": [
                            "created_at_millis",
                            "id",
                            "display_name"
                          ]
                        },
                        "selected_team_id": {
                          "type": "string",
                          "example": "team-id",
                          "description": "ID of the team currently selected by the user"
                        },
                        "profile_image_url": {
                          "type": "string",
                          "example": "https://example.com/image.jpg",
                          "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                        },
                        "signed_up_at_millis": {
                          "type": "number",
                          "example": 1630000000000,
                          "description": "The time the user signed up (identify) => `(the number of milliseconds since epoch, January 1, 1970, UTC)`"
                        },
                        "client_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                        },
                        "client_read_only_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                        },
                        "server_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here."
                        },
                        "last_active_at_millis": {
                          "type": "number",
                          "example": 1630000000000,
                          "description": "The time the user was last active (identify) => `(the number of milliseconds since epoch, January 1, 1970, UTC)`"
                        },
                        "is_anonymous": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "id",
                        "primary_email_verified",
                        "primary_email_auth_enabled",
                        "signed_up_at_millis",
                        "last_active_at_millis",
                        "is_anonymous"
                      ]
                    },
                    "team_id": {
                      "type": "string",
                      "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                      "description": "The unique identifier of the team"
                    },
                    "user_id": {
                      "type": "string",
                      "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "description": "The unique identifier of the user"
                    },
                    "display_name": {
                      "type": "string",
                      "example": "John Doe",
                      "description": "Human-readable team member display name. This is not a unique identifier. Note that this is separate from the display_name of the user."
                    },
                    "profile_image_url": {
                      "type": "string",
                      "example": "https://example.com/image.jpg",
                      "description": "URL of the profile image for team member. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                    }
                  },
                  "required": [
                    "user",
                    "team_id",
                    "user_id"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/team-invitations/accept/details": {
      "post": {
        "summary": "Get team invitation details",
        "description": "Get additional information about a team invitation code",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2",
                    "description": "A 45 character code"
                  }
                },
                "required": [
                  "code"
                ],
                "example": {
                  "code": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2"
                }
              }
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "team_id": {
                      "type": "string"
                    },
                    "team_display_name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "team_id",
                    "team_display_name"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/team-invitations/accept/check-code": {
      "post": {
        "summary": "Check if a team invitation code is valid",
        "description": "Check if a team invitation code is valid without using it",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2",
                    "description": "A 45 character code"
                  }
                },
                "required": [
                  "code"
                ],
                "example": {
                  "code": "u3h6gn4w24pqc8ya679inrhjwh1rybth6a7thurqhnpf2"
                }
              }
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "is_code_valid": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "is_code_valid"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "List users",
        "description": "Lists all the users in the project.",
        "parameters": [
          {
            "name": "team_id",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Only return users who are members of the given team"
            },
            "description": "Only return users who are members of the given team",
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number",
              "description": "The maximum number of items to return"
            },
            "description": "The maximum number of items to return",
            "required": false
          },
          {
            "name": "cursor",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "The cursor to start the result set from."
            },
            "description": "The cursor to start the result set from.",
            "required": false
          },
          {
            "name": "order_by",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "The field to sort the results by. Defaults to signed_up_at"
            },
            "description": "The field to sort the results by. Defaults to signed_up_at",
            "required": false
          },
          {
            "name": "desc",
            "in": "query",
            "schema": {
              "type": "boolean",
              "description": "Whether to sort the results in descending order. Defaults to false"
            },
            "description": "Whether to sort the results in descending order. Defaults to false",
            "required": false
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "A search query to filter the results by. This is a free-text search that is applied to the user's id (exact-match only), display name and primary email."
            },
            "description": "A search query to filter the results by. This is a free-text search that is applied to the user's id (exact-match only), display name and primary email.",
            "required": false
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                            "description": "The unique identifier of the user"
                          },
                          "primary_email": {
                            "type": "string",
                            "example": "johndoe@example.com",
                            "description": "Primary email"
                          },
                          "primary_email_verified": {
                            "type": "boolean",
                            "example": true,
                            "description": "Whether the primary email has been verified to belong to this user"
                          },
                          "primary_email_auth_enabled": {
                            "type": "boolean",
                            "example": true,
                            "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP"
                          },
                          "display_name": {
                            "type": "string",
                            "example": "John Doe",
                            "description": "Human-readable user display name. This is not a unique identifier."
                          },
                          "selected_team": {
                            "type": "object",
                            "properties": {
                              "created_at_millis": {
                                "type": "number",
                                "example": 1630000000000,
                                "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)"
                              },
                              "server_metadata": {
                                "type": "object",
                                "example": {
                                  "key": "value"
                                },
                                "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here."
                              },
                              "id": {
                                "type": "string",
                                "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                                "description": "The unique identifier of the team"
                              },
                              "display_name": {
                                "type": "string",
                                "example": "My Team",
                                "description": "Human-readable team display name. This is not a unique identifier."
                              },
                              "profile_image_url": {
                                "type": "string",
                                "example": "https://example.com/image.jpg",
                                "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                              },
                              "client_metadata": {
                                "type": "object",
                                "example": {
                                  "key": "value"
                                },
                                "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                              },
                              "client_read_only_metadata": {
                                "type": "object",
                                "example": {
                                  "key": "value"
                                },
                                "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                              }
                            },
                            "required": [
                              "created_at_millis",
                              "id",
                              "display_name"
                            ]
                          },
                          "selected_team_id": {
                            "type": "string",
                            "example": "team-id",
                            "description": "ID of the team currently selected by the user"
                          },
                          "profile_image_url": {
                            "type": "string",
                            "example": "https://example.com/image.jpg",
                            "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                          },
                          "signed_up_at_millis": {
                            "type": "number",
                            "example": 1630000000000,
                            "description": "The time the user signed up (identify) => `(the number of milliseconds since epoch, January 1, 1970, UTC)`"
                          },
                          "client_metadata": {
                            "type": "object",
                            "example": {
                              "key": "value"
                            },
                            "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                          },
                          "client_read_only_metadata": {
                            "type": "object",
                            "example": {
                              "key": "value"
                            },
                            "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                          },
                          "server_metadata": {
                            "type": "object",
                            "example": {
                              "key": "value"
                            },
                            "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here."
                          },
                          "last_active_at_millis": {
                            "type": "number",
                            "example": 1630000000000,
                            "description": "The time the user was last active (identify) => `(the number of milliseconds since epoch, January 1, 1970, UTC)`"
                          },
                          "is_anonymous": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "primary_email_verified",
                          "primary_email_auth_enabled",
                          "signed_up_at_millis",
                          "last_active_at_millis",
                          "is_anonymous"
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next_cursor": {
                          "type": "string",
                          "example": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                          "description": "The cursor to fetch the next page of results. null if there is no next page."
                        }
                      },
                      "required": []
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create user",
        "description": "Creates a new user. E-mail authentication is always enabled, and no password is set, meaning the only way to authenticate the newly created user is through magic link.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "is_anonymous": {
                    "type": "boolean"
                  },
                  "display_name": {
                    "type": "string",
                    "example": "John Doe",
                    "description": "Human-readable user display name. This is not a unique identifier."
                  },
                  "profile_image_url": {
                    "type": "string",
                    "example": "https://example.com/image.jpg",
                    "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                  },
                  "client_metadata": {
                    "type": "object",
                    "example": {
                      "key": "value"
                    },
                    "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                  },
                  "client_read_only_metadata": {
                    "type": "object",
                    "example": {
                      "key": "value"
                    },
                    "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                  },
                  "server_metadata": {
                    "type": "object",
                    "example": {
                      "key": "value"
                    },
                    "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here."
                  },
                  "primary_email": {
                    "type": "string",
                    "example": "johndoe@example.com",
                    "description": "Primary email"
                  },
                  "primary_email_verified": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether the primary email has been verified to belong to this user"
                  },
                  "primary_email_auth_enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP"
                  },
                  "password": {
                    "type": "string",
                    "example": "my-new-password",
                    "description": "Sets the user's password. Doing so revokes all current sessions."
                  },
                  "password_hash": {
                    "type": "string",
                    "description": "If `password` is not given, sets the user's password hash to the given string in Modular Crypt Format (ex.: `$2a$10$VIhIOofSMqGdGlL4wzE//e.77dAQGqNtF/1dT7bqCrVtQuInWy2qi`). Doing so revokes all current sessions."
                  },
                  "totp_secret_base64": {
                    "type": "string",
                    "example": "dG90cC1zZWNyZXQ=",
                    "description": "Enables 2FA and sets a TOTP secret for the user. Set to null to disable 2FA."
                  }
                },
                "example": {
                  "display_name": "John Doe",
                  "profile_image_url": "https://example.com/image.jpg",
                  "client_metadata": {
                    "key": "value"
                  },
                  "client_read_only_metadata": {
                    "key": "value"
                  },
                  "server_metadata": {
                    "key": "value"
                  },
                  "primary_email": "johndoe@example.com",
                  "primary_email_verified": true,
                  "primary_email_auth_enabled": true,
                  "password": "my-new-password",
                  "totp_secret_base64": "dG90cC1zZWNyZXQ="
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "description": "The unique identifier of the user"
                    },
                    "primary_email": {
                      "type": "string",
                      "example": "johndoe@example.com",
                      "description": "Primary email"
                    },
                    "primary_email_verified": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the primary email has been verified to belong to this user"
                    },
                    "primary_email_auth_enabled": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP"
                    },
                    "display_name": {
                      "type": "string",
                      "example": "John Doe",
                      "description": "Human-readable user display name. This is not a unique identifier."
                    },
                    "selected_team": {
                      "type": "object",
                      "properties": {
                        "created_at_millis": {
                          "type": "number",
                          "example": 1630000000000,
                          "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)"
                        },
                        "server_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here."
                        },
                        "id": {
                          "type": "string",
                          "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                          "description": "The unique identifier of the team"
                        },
                        "display_name": {
                          "type": "string",
                          "example": "My Team",
                          "description": "Human-readable team display name. This is not a unique identifier."
                        },
                        "profile_image_url": {
                          "type": "string",
                          "example": "https://example.com/image.jpg",
                          "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                        },
                        "client_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                        },
                        "client_read_only_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                        }
                      },
                      "required": [
                        "created_at_millis",
                        "id",
                        "display_name"
                      ]
                    },
                    "selected_team_id": {
                      "type": "string",
                      "example": "team-id",
                      "description": "ID of the team currently selected by the user"
                    },
                    "profile_image_url": {
                      "type": "string",
                      "example": "https://example.com/image.jpg",
                      "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                    },
                    "signed_up_at_millis": {
                      "type": "number",
                      "example": 1630000000000,
                      "description": "The time the user signed up (identify) => `(the number of milliseconds since epoch, January 1, 1970, UTC)`"
                    },
                    "client_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                    },
                    "client_read_only_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                    },
                    "server_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here."
                    },
                    "last_active_at_millis": {
                      "type": "number",
                      "example": 1630000000000,
                      "description": "The time the user was last active (identify) => `(the number of milliseconds since epoch, January 1, 1970, UTC)`"
                    },
                    "is_anonymous": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "primary_email_verified",
                    "primary_email_auth_enabled",
                    "signed_up_at_millis",
                    "last_active_at_millis",
                    "is_anonymous"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Get current user",
        "description": "Gets the currently authenticated user.",
        "parameters": [],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "description": "The unique identifier of the user"
                    },
                    "primary_email": {
                      "type": "string",
                      "example": "johndoe@example.com",
                      "description": "Primary email"
                    },
                    "primary_email_verified": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the primary email has been verified to belong to this user"
                    },
                    "primary_email_auth_enabled": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP"
                    },
                    "display_name": {
                      "type": "string",
                      "example": "John Doe",
                      "description": "Human-readable user display name. This is not a unique identifier."
                    },
                    "selected_team": {
                      "type": "object",
                      "properties": {
                        "created_at_millis": {
                          "type": "number",
                          "example": 1630000000000,
                          "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)"
                        },
                        "server_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here."
                        },
                        "id": {
                          "type": "string",
                          "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                          "description": "The unique identifier of the team"
                        },
                        "display_name": {
                          "type": "string",
                          "example": "My Team",
                          "description": "Human-readable team display name. This is not a unique identifier."
                        },
                        "profile_image_url": {
                          "type": "string",
                          "example": "https://example.com/image.jpg",
                          "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                        },
                        "client_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                        },
                        "client_read_only_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                        }
                      },
                      "required": [
                        "created_at_millis",
                        "id",
                        "display_name"
                      ]
                    },
                    "selected_team_id": {
                      "type": "string",
                      "example": "team-id",
                      "description": "ID of the team currently selected by the user"
                    },
                    "profile_image_url": {
                      "type": "string",
                      "example": "https://example.com/image.jpg",
                      "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                    },
                    "signed_up_at_millis": {
                      "type": "number",
                      "example": 1630000000000,
                      "description": "The time the user signed up (identify) => `(the number of milliseconds since epoch, January 1, 1970, UTC)`"
                    },
                    "client_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                    },
                    "client_read_only_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                    },
                    "server_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here."
                    },
                    "last_active_at_millis": {
                      "type": "number",
                      "example": 1630000000000,
                      "description": "The time the user was last active (identify) => `(the number of milliseconds since epoch, January 1, 1970, UTC)`"
                    },
                    "is_anonymous": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "primary_email_verified",
                    "primary_email_auth_enabled",
                    "signed_up_at_millis",
                    "last_active_at_millis",
                    "is_anonymous"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete current user",
        "description": "Deletes the currently authenticated user. Use this with caution.",
        "parameters": [],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Always equal to true.",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update current user",
        "description": "Updates the currently authenticated user. Only the values provided will be updated.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "display_name": {
                    "type": "string",
                    "example": "John Doe",
                    "description": "Human-readable user display name. This is not a unique identifier."
                  },
                  "profile_image_url": {
                    "type": "string",
                    "example": "https://example.com/image.jpg",
                    "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                  },
                  "client_metadata": {
                    "type": "object",
                    "example": {
                      "key": "value"
                    },
                    "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                  },
                  "client_read_only_metadata": {
                    "type": "object",
                    "example": {
                      "key": "value"
                    },
                    "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                  },
                  "server_metadata": {
                    "type": "object",
                    "example": {
                      "key": "value"
                    },
                    "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here."
                  },
                  "primary_email": {
                    "type": "string",
                    "example": "johndoe@example.com",
                    "description": "Primary email"
                  },
                  "primary_email_verified": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether the primary email has been verified to belong to this user"
                  },
                  "primary_email_auth_enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP"
                  },
                  "password": {
                    "type": "string",
                    "example": "my-new-password",
                    "description": "Sets the user's password. Doing so revokes all current sessions."
                  },
                  "password_hash": {
                    "type": "string",
                    "description": "If `password` is not given, sets the user's password hash to the given string in Modular Crypt Format (ex.: `$2a$10$VIhIOofSMqGdGlL4wzE//e.77dAQGqNtF/1dT7bqCrVtQuInWy2qi`). Doing so revokes all current sessions."
                  },
                  "totp_secret_base64": {
                    "type": "string",
                    "example": "dG90cC1zZWNyZXQ=",
                    "description": "Enables 2FA and sets a TOTP secret for the user. Set to null to disable 2FA."
                  },
                  "selected_team_id": {
                    "type": "string",
                    "example": "team-id",
                    "description": "ID of the team currently selected by the user"
                  },
                  "is_anonymous": {
                    "type": "boolean"
                  }
                },
                "example": {
                  "display_name": "John Doe",
                  "profile_image_url": "https://example.com/image.jpg",
                  "client_metadata": {
                    "key": "value"
                  },
                  "client_read_only_metadata": {
                    "key": "value"
                  },
                  "server_metadata": {
                    "key": "value"
                  },
                  "primary_email": "johndoe@example.com",
                  "primary_email_verified": true,
                  "primary_email_auth_enabled": true,
                  "password": "my-new-password",
                  "totp_secret_base64": "dG90cC1zZWNyZXQ=",
                  "selected_team_id": "team-id"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "description": "The unique identifier of the user"
                    },
                    "primary_email": {
                      "type": "string",
                      "example": "johndoe@example.com",
                      "description": "Primary email"
                    },
                    "primary_email_verified": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the primary email has been verified to belong to this user"
                    },
                    "primary_email_auth_enabled": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP"
                    },
                    "display_name": {
                      "type": "string",
                      "example": "John Doe",
                      "description": "Human-readable user display name. This is not a unique identifier."
                    },
                    "selected_team": {
                      "type": "object",
                      "properties": {
                        "created_at_millis": {
                          "type": "number",
                          "example": 1630000000000,
                          "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)"
                        },
                        "server_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here."
                        },
                        "id": {
                          "type": "string",
                          "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                          "description": "The unique identifier of the team"
                        },
                        "display_name": {
                          "type": "string",
                          "example": "My Team",
                          "description": "Human-readable team display name. This is not a unique identifier."
                        },
                        "profile_image_url": {
                          "type": "string",
                          "example": "https://example.com/image.jpg",
                          "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                        },
                        "client_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                        },
                        "client_read_only_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                        }
                      },
                      "required": [
                        "created_at_millis",
                        "id",
                        "display_name"
                      ]
                    },
                    "selected_team_id": {
                      "type": "string",
                      "example": "team-id",
                      "description": "ID of the team currently selected by the user"
                    },
                    "profile_image_url": {
                      "type": "string",
                      "example": "https://example.com/image.jpg",
                      "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                    },
                    "signed_up_at_millis": {
                      "type": "number",
                      "example": 1630000000000,
                      "description": "The time the user signed up (identify) => `(the number of milliseconds since epoch, January 1, 1970, UTC)`"
                    },
                    "client_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                    },
                    "client_read_only_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                    },
                    "server_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here."
                    },
                    "last_active_at_millis": {
                      "type": "number",
                      "example": 1630000000000,
                      "description": "The time the user was last active (identify) => `(the number of milliseconds since epoch, January 1, 1970, UTC)`"
                    },
                    "is_anonymous": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "primary_email_verified",
                    "primary_email_auth_enabled",
                    "signed_up_at_millis",
                    "last_active_at_millis",
                    "is_anonymous"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "summary": "Get user",
        "description": "Gets a user by user ID.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
              "description": "The ID of the user, or the special value `me` for the currently authenticated user"
            },
            "description": "The ID of the user, or the special value `me` for the currently authenticated user",
            "required": true
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "description": "The unique identifier of the user"
                    },
                    "primary_email": {
                      "type": "string",
                      "example": "johndoe@example.com",
                      "description": "Primary email"
                    },
                    "primary_email_verified": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the primary email has been verified to belong to this user"
                    },
                    "primary_email_auth_enabled": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP"
                    },
                    "display_name": {
                      "type": "string",
                      "example": "John Doe",
                      "description": "Human-readable user display name. This is not a unique identifier."
                    },
                    "selected_team": {
                      "type": "object",
                      "properties": {
                        "created_at_millis": {
                          "type": "number",
                          "example": 1630000000000,
                          "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)"
                        },
                        "server_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here."
                        },
                        "id": {
                          "type": "string",
                          "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                          "description": "The unique identifier of the team"
                        },
                        "display_name": {
                          "type": "string",
                          "example": "My Team",
                          "description": "Human-readable team display name. This is not a unique identifier."
                        },
                        "profile_image_url": {
                          "type": "string",
                          "example": "https://example.com/image.jpg",
                          "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                        },
                        "client_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                        },
                        "client_read_only_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                        }
                      },
                      "required": [
                        "created_at_millis",
                        "id",
                        "display_name"
                      ]
                    },
                    "selected_team_id": {
                      "type": "string",
                      "example": "team-id",
                      "description": "ID of the team currently selected by the user"
                    },
                    "profile_image_url": {
                      "type": "string",
                      "example": "https://example.com/image.jpg",
                      "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                    },
                    "signed_up_at_millis": {
                      "type": "number",
                      "example": 1630000000000,
                      "description": "The time the user signed up (identify) => `(the number of milliseconds since epoch, January 1, 1970, UTC)`"
                    },
                    "client_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                    },
                    "client_read_only_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                    },
                    "server_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here."
                    },
                    "last_active_at_millis": {
                      "type": "number",
                      "example": 1630000000000,
                      "description": "The time the user was last active (identify) => `(the number of milliseconds since epoch, January 1, 1970, UTC)`"
                    },
                    "is_anonymous": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "primary_email_verified",
                    "primary_email_auth_enabled",
                    "signed_up_at_millis",
                    "last_active_at_millis",
                    "is_anonymous"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user",
        "description": "Deletes a user. Use this with caution.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
              "description": "The ID of the user, or the special value `me` for the currently authenticated user"
            },
            "description": "The ID of the user, or the special value `me` for the currently authenticated user",
            "required": true
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Always equal to true.",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update user",
        "description": "Updates a user. Only the values provided will be updated.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
              "description": "The ID of the user, or the special value `me` for the currently authenticated user"
            },
            "description": "The ID of the user, or the special value `me` for the currently authenticated user",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "display_name": {
                    "type": "string",
                    "example": "John Doe",
                    "description": "Human-readable user display name. This is not a unique identifier."
                  },
                  "profile_image_url": {
                    "type": "string",
                    "example": "https://example.com/image.jpg",
                    "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                  },
                  "client_metadata": {
                    "type": "object",
                    "example": {
                      "key": "value"
                    },
                    "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                  },
                  "client_read_only_metadata": {
                    "type": "object",
                    "example": {
                      "key": "value"
                    },
                    "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                  },
                  "server_metadata": {
                    "type": "object",
                    "example": {
                      "key": "value"
                    },
                    "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here."
                  },
                  "primary_email": {
                    "type": "string",
                    "example": "johndoe@example.com",
                    "description": "Primary email"
                  },
                  "primary_email_verified": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether the primary email has been verified to belong to this user"
                  },
                  "primary_email_auth_enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP"
                  },
                  "password": {
                    "type": "string",
                    "example": "my-new-password",
                    "description": "Sets the user's password. Doing so revokes all current sessions."
                  },
                  "password_hash": {
                    "type": "string",
                    "description": "If `password` is not given, sets the user's password hash to the given string in Modular Crypt Format (ex.: `$2a$10$VIhIOofSMqGdGlL4wzE//e.77dAQGqNtF/1dT7bqCrVtQuInWy2qi`). Doing so revokes all current sessions."
                  },
                  "totp_secret_base64": {
                    "type": "string",
                    "example": "dG90cC1zZWNyZXQ=",
                    "description": "Enables 2FA and sets a TOTP secret for the user. Set to null to disable 2FA."
                  },
                  "selected_team_id": {
                    "type": "string",
                    "example": "team-id",
                    "description": "ID of the team currently selected by the user"
                  },
                  "is_anonymous": {
                    "type": "boolean"
                  }
                },
                "example": {
                  "display_name": "John Doe",
                  "profile_image_url": "https://example.com/image.jpg",
                  "client_metadata": {
                    "key": "value"
                  },
                  "client_read_only_metadata": {
                    "key": "value"
                  },
                  "server_metadata": {
                    "key": "value"
                  },
                  "primary_email": "johndoe@example.com",
                  "primary_email_verified": true,
                  "primary_email_auth_enabled": true,
                  "password": "my-new-password",
                  "totp_secret_base64": "dG90cC1zZWNyZXQ=",
                  "selected_team_id": "team-id"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "description": "The unique identifier of the user"
                    },
                    "primary_email": {
                      "type": "string",
                      "example": "johndoe@example.com",
                      "description": "Primary email"
                    },
                    "primary_email_verified": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the primary email has been verified to belong to this user"
                    },
                    "primary_email_auth_enabled": {
                      "type": "boolean",
                      "example": true,
                      "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP"
                    },
                    "display_name": {
                      "type": "string",
                      "example": "John Doe",
                      "description": "Human-readable user display name. This is not a unique identifier."
                    },
                    "selected_team": {
                      "type": "object",
                      "properties": {
                        "created_at_millis": {
                          "type": "number",
                          "example": 1630000000000,
                          "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)"
                        },
                        "server_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here."
                        },
                        "id": {
                          "type": "string",
                          "example": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                          "description": "The unique identifier of the team"
                        },
                        "display_name": {
                          "type": "string",
                          "example": "My Team",
                          "description": "Human-readable team display name. This is not a unique identifier."
                        },
                        "profile_image_url": {
                          "type": "string",
                          "example": "https://example.com/image.jpg",
                          "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                        },
                        "client_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                        },
                        "client_read_only_metadata": {
                          "type": "object",
                          "example": {
                            "key": "value"
                          },
                          "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                        }
                      },
                      "required": [
                        "created_at_millis",
                        "id",
                        "display_name"
                      ]
                    },
                    "selected_team_id": {
                      "type": "string",
                      "example": "team-id",
                      "description": "ID of the team currently selected by the user"
                    },
                    "profile_image_url": {
                      "type": "string",
                      "example": "https://example.com/image.jpg",
                      "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in."
                    },
                    "signed_up_at_millis": {
                      "type": "number",
                      "example": 1630000000000,
                      "description": "The time the user signed up (identify) => `(the number of milliseconds since epoch, January 1, 1970, UTC)`"
                    },
                    "client_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client."
                    },
                    "client_read_only_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status."
                    },
                    "server_metadata": {
                      "type": "object",
                      "example": {
                        "key": "value"
                      },
                      "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here."
                    },
                    "last_active_at_millis": {
                      "type": "number",
                      "example": 1630000000000,
                      "description": "The time the user was last active (identify) => `(the number of milliseconds since epoch, January 1, 1970, UTC)`"
                    },
                    "is_anonymous": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "primary_email_verified",
                    "primary_email_auth_enabled",
                    "signed_up_at_millis",
                    "last_active_at_millis",
                    "is_anonymous"
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}